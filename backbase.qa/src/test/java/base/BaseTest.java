package base;

import java.io.File;
import java.io.FileInputStream;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.Reporter;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeSuite;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

import dataProvider.ConfigDataProvider;
import factory.BrowserFactory;
import library.Utility;
import pageObjects.HomePage;

public class BaseTest {

	public static WebDriver driver;
	public static Properties prop;
	public static ExtentReports report;
	public ExtentTest logger;
	String browser;
	String url;
	
	@BeforeSuite
	public void setUpReport() {
		report = new ExtentReports("./Reports/Backbase_"+Utility.getCurrentDate_Time()+".html");
		
	}

	@AfterSuite (alwaysRun= true)
	public void tearDownReport() {
		report.flush();
		}
	
	/*@BeforeClass
	public void openApplication() {
		
		ConfigDataProvider config= new ConfigDataProvider();
		browser= config.getBrowser();
		url= config.getStagingURL();
		driver = BrowserFactory.startBrowser(browser, url);
		//homeP = new HomePage();
		//Assert.assertTrue(homeP.isPageLoaded(), "User is not successfully logged in");
	}
	
	@AfterClass
	public void tearDownApplication() {
		BrowserFactory.closeBrowser(driver);
	}*/

	@AfterMethod (alwaysRun= true)
	public void endTest(ITestResult result) 
	{
		String path = Utility.captureScreenshot(driver);
		
		if (result.getStatus() == ITestResult.SUCCESS) 
		{
			logger.log(LogStatus.PASS, logger.addScreenCapture(path));
			
		} else if (result.getStatus() == ITestResult.FAILURE) 
		{
			logger.log(LogStatus.FAIL, logger.addScreenCapture(path));
		}

		report.endTest(logger);
	}

	// Constructor to load config file
	public BaseTest() {
		File src = new File("./Config/config.properties");

		try {
			FileInputStream input = new FileInputStream(src);
			prop = new Properties();
			prop.load(input);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// Method to start the web browser with browser name and URL
	public static WebDriver startBrowser()

	{
		String browserName = prop.getProperty("browser");

		if (browserName.equalsIgnoreCase("chrome")) {
			System.setProperty("webdriver.chrome.driver", "./Drivers/chromedriver.exe");
			driver = new ChromeDriver();
		}

		else if (browserName.equalsIgnoreCase("Firefox")) {
			System.setProperty("webdriver.gecko.driver", "./Drivers/geckodriver.exe");
			driver = new FirefoxDriver();
		} 
		else if (browserName.equalsIgnoreCase("IE")) {
			System.setProperty("webdriver.ie.driver", "./Drivers/IEDriverServer.exe");
			driver = new InternetExplorerDriver();
		} else {
			System.out.println("Please provide valid browser");
		}
		
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
		driver.manage().window().maximize();
		driver.get(prop.getProperty("url"));
		
		return driver;
	}

	// Method to log messages that will be included in HTML reports generated by
	// TestNG
	public static void log(String message) {
		Reporter.log(message, true);
	}

}
